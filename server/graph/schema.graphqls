# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @hasRole(role: String!) on FIELD_DEFINITION | OBJECT

type Movie {
  id: ID!
  title: String!
  genre: String!
  year: Int!
  wiki: String!
  plot: String!
  cast: String!
}

input MovieInput {
  title: String!
  genre: String!
  year: Int!
  wiki: String!
  plot: String!
  cast: String!
}

type User {
  id: ID!
  email: String!
  passwordHash: String!
  role: String!
}

type Rating {
  id: ID!
  user: User!
  movie: Movie!
  score: Int!
}

type Query {
  movie(id: ID!): Movie
  movies: [Movie!]!
  recommendations(userId: ID!): [Movie!]!
  ratings(userId: ID!): [Rating!]!
  user(id: ID!): User!
    
  # Admin-only queries
  # allUsers: [User!]! @hasRole(role: ADMIN)
  # allRatings: [Rating!]! @hasRole(role: ADMIN)
}

type Mutation {
  rateMovie(movieId: ID!, score: Int!): Rating!
  deleteRating(id: ID!): Boolean!
    
  # Admin-only mutations
  # createMovie(input: MovieInput!): Movie! @hasRole(role: ADMIN)
  # updateMovie(id: ID!, input: MovieInput!): Movie! @hasRole(role: ADMIN)
  # deleteMovie(id: ID!): Boolean! @hasRole(role: ADMIN)

  # createUser(username: String!, email: String!, password: String!): User! @hasRole(role: ADMIN)
  # updateUser(id: ID!, username: String, email: String): User! @hasRole(role: ADMIN)
  # deleteUser(id: ID!): Boolean! @hasRole(role: ADMIN)
}