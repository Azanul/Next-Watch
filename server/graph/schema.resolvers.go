package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"errors"
	"fmt"

	"github.com/Azanul/Next-Watch/graph/model"
	"github.com/Azanul/Next-Watch/internal/auth"
	"github.com/google/uuid"
)

// RateMovie is the resolver for the rateMovie field.
func (r *mutationResolver) RateMovie(ctx context.Context, movieID string, score int) (*model.Rating, error) {
	currentUser, err := auth.GetUserFromContext(ctx)
	if err != nil {
		return nil, err
	}

	// Validate inputs
	var currentUserUUID, movieUUID uuid.UUID
	if currentUserUUID, err = uuid.Parse(currentUser.ID); err != nil {
		return nil, errors.New("Invalid user id")
	}
	if movieUUID, err = uuid.Parse(movieID); err != nil {
		return nil, errors.New("Invalid movie id")
	}
	if score < 1 || score > 5 {
		return nil, errors.New("rating score must be between 1 and 5")
	}

	// Call service to rate movie
	rating, err := r.RatingService.RateMovie(ctx, currentUserUUID, movieUUID, score)
	if err != nil {
		return nil, err
	}

	// Convert internal model to GraphQL model
	return &model.Rating{
		ID:    rating.ID.String(),
		User:  &model.User{ID: rating.UserID.String()},
		Movie: &model.Movie{ID: rating.MovieID.String()},
		Score: rating.Score,
	}, nil
}

// DeleteRating is the resolver for the deleteRating field.
func (r *mutationResolver) DeleteRating(ctx context.Context, id string) (bool, error) {
	// Get current user from context
	currentUser, err := auth.GetUserFromContext(ctx)
	if err != nil {
		return false, err
	}

	ratingID, err := uuid.Parse(id)
	if err != nil {
		return false, errors.New("invalid rating ID")
	}

	// Fetch the rating
	rating, err := r.RatingService.GetRatingByID(ctx, ratingID)
	if err != nil {
		return false, err
	}
	if rating == nil {
		return false, errors.New("rating not found")
	}

	// Check if the user is authorized to delete this rating
	isAdmin := currentUser.Role == "ADMIN"
	isOwner := rating.UserID.String() == currentUser.ID

	if !isAdmin && !isOwner {
		return false, errors.New("not authorized to delete this rating")
	}

	// Delete the rating
	return r.RatingService.DeleteRating(ctx, ratingID)
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	panic(fmt.Errorf("not implemented: Movie - movie"))
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	panic(fmt.Errorf("not implemented: Movies - movies"))
}

// Recommendations is the resolver for the recommendations field.
func (r *queryResolver) Recommendations(ctx context.Context, userID string) ([]*model.Movie, error) {
	panic(fmt.Errorf("not implemented: Recommendations - recommendations"))
}

// Ratings is the resolver for the ratings field.
func (r *queryResolver) Ratings(ctx context.Context, userID string) ([]*model.Rating, error) {
	panic(fmt.Errorf("not implemented: Ratings - ratings"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string, password string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, username *string, email *string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}
func (r *queryResolver) AllUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: AllUsers - allUsers"))
}
func (r *queryResolver) AllRatings(ctx context.Context) ([]*model.Rating, error) {
	panic(fmt.Errorf("not implemented: AllRatings - allRatings"))
}
*/
